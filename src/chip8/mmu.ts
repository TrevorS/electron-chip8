const MEMORY_SIZE = 4096;
const ROM_OFFSET = 512;

export default class MMU {
  private memory: Uint8Array;
  private fontset: Uint8Array;

  constructor() {
    this.fontset = new Uint8Array([
      0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
      0x20, 0x60, 0x20, 0x20, 0x70, // 1
      0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
      0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
      0x90, 0x90, 0xF0, 0x10, 0x10, // 4
      0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
      0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
      0xF0, 0x10, 0x20, 0x40, 0x40, // 7
      0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
      0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
      0xF0, 0x90, 0xF0, 0x90, 0x90, // A
      0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
      0xF0, 0x80, 0x80, 0x80, 0xF0, // C
      0xE0, 0x90, 0x90, 0x90, 0xE0, // D
      0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
      0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    ]);

    this.reset();
  }

  reset(): void {
    this.memory = new Uint8Array(MEMORY_SIZE);
    this.fontset.forEach((value, i) => {
      this.memory[i] = value;
    });
  }

  write_byte(address: number, value: number): void {
    this.memory[address] = value;
  }

  read_byte(address: number): number {
    return this.memory[address];
  }

  read_word(address: number): number {
    return this.read_byte(address) << 8 | this.read_byte(address + 1);
  }

  load_rom(rom: Uint8Array): void {
    rom.forEach((value, i) => {
      this.memory[ROM_OFFSET + i] = value;
    });
  }
}
